<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		   http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<context:annotation-config />
	<!-- 加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 -->
	<context:component-scan base-package="com.rolldata">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
  		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
			
	</context:component-scan>

<!-- 配置数据源1 -->
	<bean name="dataSource_formal" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="dbType" value = "${formal.jdbc.dbType}" />
		<property name="url" value="${formal.jdbc.url.wd}" />
		<property name="username" value="${formal.jdbc.username.wd}" />
		<property name="password" value="${formal.jdbc.password.wd}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="200" />
		<!-- 连接池最大空闲 
		<property name="maxIdle" value="20" />-->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!--
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
		-->
		<property name="validationQuery" value="${formal.validationQuery.sqlserver}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat,wall,log4j2" />
		<!--<property name="filters" value="mergeStat" /> -->
		<!-- Oracle连接是获取字段注释 -->
		<property name="connectProperties">
			<props>
				<prop key="remarksReporting">true</prop>
			</props>
		</property>
		<!--<property name="proxyFilters">
			<list>
				<ref bean="log-filter"/>
			</list>
		</property>-->
	</bean>
	<!-- 数据源集合 -->
	<bean id="dataSource"
		class="com.rolldata.core.extend.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="com.rolldata.core.extend.datasource.DataSourceType">
				<entry key="dataSource_formal" value-ref="dataSource_formal" />
				<!--多数据源支持 -->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_formal" />
	</bean>
	
	<!-- JPA实体管理器工厂    --> 
	<bean id="entityManagerFactory"  
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!--持久层提供者-->  
        <property name="persistenceProvider" ref="persistenceProvider"/> 
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" /> 
        <property name="jpaDialect" ref="jpaDialect"/> 
        <!-- 加入定制化包路径   --> 
        <property name="packagesToScan" value="com.rolldata.**.entity" />  <!--待扫描的实体类包，不再需要persistence.xml了 -->
  
        <property name="jpaProperties">  
            <props>  
                <prop key="hibernate.current_session_context_class">thread</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop> <!-- validate/update/create   -->
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="hibernate.dialect">${formal.jdbc.dialect}</prop>
                <!-- 配置结果集是否可滚动，解决在Hibernate4中对分页操作会出现下列异常信息org.hibernate.exception.GenericJDBCException: 只进结果集不支持请求的操作。 -->
                <prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
                 <!--ehcache二级缓存-->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.internal.EhcacheRegionFactory</prop>
                <!-- 建表的命名规则   --> 
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>  
                  <!--配置在实体类写@Cacheable就可以开启二级缓存-->
                <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
                <prop key="hibernate.generate_statistics">false</prop>
                <!--设置查询缓存@QueryHints-->
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.provider_configuration">classpath:ehcache.xml</prop>
            </props>  
        </property>  
    </bean>  
    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>  
     <bean id="persistenceProvider"  
          class="org.hibernate.jpa.HibernatePersistenceProvider"/>  
      <!-- 设置JPA实现厂商的特定属性 --> 
    <bean id="hibernateJpaVendorAdapter"  
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">  
    </bean>
    
    <!-- Jpa 事务配置 -->  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
        <property name="entityManagerFactory" ref="entityManagerFactory"/>  
<!--        <qualifier value="mssqlEM"/>-->
    </bean>  
    
    <!-- 使用annotation定义事务   --> 
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false" />
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"  
                no-rollback-for="java.lang.RuntimeException" />  
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
            <tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />  
  			<tx:method name="save*" propagation="REQUIRED" />
  			<tx:method name="modify*" propagation="REQUIRED" />
  			<tx:method name="remove*" propagation="REQUIRED" />
  			<tx:method name="del*" propagation="REQUIRED" />
  			
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>  
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>  
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>  
        </tx:attributes>  
    </tx:advice>  
      <!-- 配置事务切点，并把事务切点和事务属性关联起来 -->
	<aop:config proxy-target-class="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.rolldata..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
    <!-- 配置repositories自动代理功能,在 Spring 配置文件中启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="com.rolldata" transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
    
</beans>