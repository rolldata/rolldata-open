<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
    <!-- 配置权限管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- ref对应我们写的realm  MyShiro -->
        <property name="realm" ref="userRealm" />
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="com.rolldata.web.system.security.session.OnlineWebSessionManager">
        <property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"></property>
        <property name="sessionFactory" ref="onlineSessionFactory"/>
        <property name="sessionDAO" ref="onlineSessionDAO"/>
        <property name="deleteInvalidSessions" value="false"/>
        <property name="sessionValidationInterval" value="${shiro.session.validation.interval}"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 使用下面配置的缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="com.rolldata.web.system.security.web.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="shiroCacheManager" />
		<property name="maxRetryCount" value="${shiro.user.password.maxRetryCount}" />
		<property name="hashAlgorithmName" value="${shiro.credentials.hashAlgorithmName}" />
		<property name="hashIterations" value="${shiro.credentials.hashIterations}" />
		<property name="storedCredentialsHexEncoded" value="${shiro.credentials.storedCredentialsHexEncoded}" />
	</bean>
     <bean id="userRealm" class="com.rolldata.web.system.security.shiro.UserRealm">
     	<property name="credentialsMatcher" ref="credentialsMatcher" />
        <!-- 用切面缓存代理了 此处就不缓存了 -->
        <property name="authenticationCachingEnabled" value="false"/>
        <property name="authorizationCachingEnabled" value="false"/>
    </bean>
	<!-- filter -->
    <!-- 退出登录过滤器 -->
    <bean id="logoutFilter" class="com.rolldata.web.system.security.web.SystemLogoutFilter">
    	<property name="cacheManager" ref="shiroCacheManager"/>
        <property name="redirectUrl" value="${shiro.logout.success.url}"/>
    </bean>
    <!--替换默认的form 验证过滤器-->
    <bean id="formAuthenticationFilter" class="com.rolldata.web.system.security.web.FormAuthenticationFilter">
        <!--<property name="defaultSuccessUrl" value="${shiro.default.success.url}"/>
        <property name="adminDefaultSuccessUrl" value="${shiro.admin.default.success.url}"/>-->
        <property name="successUrl" value="${shiro.default.success.url}"/>
        <!--表单上的用户名/密码 下次自动登录的参数名-->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>

    </bean>
    
    <bean id="onlineSessionFactory" class="com.rolldata.web.system.security.session.OnlineSessionFactory"/>
     <!--dao -->
    <!-- 会话保持的DAO -->
    <bean id="onlineSessionDAO" class="com.rolldata.web.system.security.session.OnlineSessionDAO">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="activeSessionsCacheName" value="${shiro.active.session.cacheName}"/>
    </bean>
    <!---cookie-->
    <!-- uid(session id) 生成策略 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="secure" value="${shiro.uid.cookie.secure}"/>
        <property name="maxAge" value="${shiro.uid.cookie.maxAge}"/>
    </bean>
    <!-- 同步当前会话数据到数据库 -->
    <bean id="syncOnlineSessionFilter" class="com.rolldata.web.system.security.sync.SyncOnlineSessionFilter">
        <property name="onlineSessionDAO" ref="onlineSessionDAO"/>
    </bean>
     <!-- 验证会话是否是强制退出等的filter -->
    <bean id="onlineSessionFilter" class="com.rolldata.web.system.security.filter.OnlineSessionFilter">
        <property name="forceLogoutUrl" value="${shiro.user.force.logout.url}"/>
        <property name="onlineSessionDAO" ref="onlineSessionDAO"/>
    </bean>
    <!--提取系统用户（User） 验证用户是否合法的过滤器（如是否删除了 是否锁定了） -->
    <bean id="sysUserFilter" class="com.rolldata.web.system.security.filter.SysUserFilter">
        <property name="userLockedUrl" value="${shiro.user.locked.url}"/>
        <property name="userNotfoundUrl" value="${shiro.user.notfound.url}"/>
        <property name="userUnknownErrorUrl" value="${shiro.user.unknown.error.url}"/>
    </bean>
    <bean id="kickoutSessionControlFilter" class="com.rolldata.web.system.security.filter.KickoutSessionControlFilter">
        <property name="sessionManager" ref="sessionManager"/> 
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- 是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户 --> 
        <property name="kickoutAfter" value="false"/>  
        <!-- 同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录 -->
        <property name="maxSession" value="1"/>  
        <property name="kickoutUrl" value="${shiro.user.kickout.logout.url}"/>  
    </bean>
    <bean id="shiroFilter" class="com.rolldata.web.system.security.filter.CustomShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="${shiro.login.url}"/>
        <property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <util:map>
            	<entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
                <entry key="onlineSession" value-ref="onlineSessionFilter"/>
                <entry key="syncOnlineSession" value-ref="syncOnlineSessionFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /static/** = anon
                /loginController/language = anon
<!--                /loginController/verifyLogin = anon-->
                /passwordBackController/** = anon
                /thirdPartyController/** = anon
                /reportFormOnlineController/** = anon
                /loginController/logout = logout
                /loginController/login  = authc
                /** = sysUser,onlineSession,user,syncOnlineSession,kickout
            </value>
        </property>
    </bean>
    
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
     <!-- 
        AOP式方法级权限检查:开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，
        需借助SpringAOP扫描使用Shiro注解的类，并在必要时进行安全逻辑验证  
    -->
    <aop:config proxy-target-class="true"></aop:config>
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>